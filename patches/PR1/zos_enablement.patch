diff --git a/lib/file-type.c b/lib/file-type.c
index bfdf9dc..173b2ef 100644
--- a/lib/file-type.c
+++ b/lib/file-type.c
@@ -48,6 +48,7 @@ file_type (struct stat const *st)
   /* Do the S_TYPEIS* macros next, as they may be implemented in terms
      of S_ISNAM, and we want the more-specialized interpretation.  */
 
+#if !defined(__MVS__)
   if (S_TYPEISMQ (st))
     return _("message queue");
 
@@ -56,6 +57,7 @@ file_type (struct stat const *st)
 
   if (S_TYPEISSHM (st))
     return _("shared memory object");
+#endif
 
   if (S_TYPEISTMO (st))
     return _("typed memory object");
diff --git a/lib/filemode.c b/lib/filemode.c
index a8cbea8..63aad5b 100644
--- a/lib/filemode.c
+++ b/lib/filemode.c
@@ -155,12 +155,15 @@ filemodestring (struct stat const *statp, char *str)
 {
   strmode (statp->st_mode, str);
 
+#if !defined(__MVS__)
   if (S_TYPEISSEM (statp))
     str[0] = 'F';
   else if (S_TYPEISMQ (statp))
     str[0] = 'Q';
   else if (S_TYPEISSHM (statp))
     str[0] = 'S';
-  else if (S_TYPEISTMO (statp))
+  else 
+#endif
+if (S_TYPEISTMO (statp))
     str[0] = 'T';
 }
diff --git a/src/dd.c b/src/dd.c
index cfafb25..b0a5945 100644
--- a/src/dd.c
+++ b/src/dd.c
@@ -2356,7 +2356,11 @@ dd_copy (void)
           error (0, errno, _("cannot fstat %s"), quoteaf (output_file));
           return EXIT_FAILURE;
         }
+#ifdef __MVS__
+      if (S_ISREG (stdout_stat.st_mode))
+#else
       if (S_ISREG (stdout_stat.st_mode) || S_TYPEISSHM (&stdout_stat))
+#endif
         {
           off_t output_offset = lseek (STDOUT_FILENO, 0, SEEK_CUR);
           if (0 <= output_offset && stdout_stat.st_size < output_offset)
@@ -2518,7 +2522,11 @@ main (int argc, char **argv)
                 }
               else if (S_ISREG (stdout_stat.st_mode)
                        || S_ISDIR (stdout_stat.st_mode)
+#if !defined(__MVS__)
                        || S_TYPEISSHM (&stdout_stat))
+#else
+)
+#endif
                 {
                   intmax_t isize = size;
                   error (0, ftruncate_errno,
diff --git a/src/pinky.c b/src/pinky.c
index 88862c2..ef259ed 100644
--- a/src/pinky.c
+++ b/src/pinky.c
@@ -242,13 +242,21 @@ print_entry (const STRUCT_UTMP *utmp_ent)
         printf (" %19s", _("        ???"));
       else
         {
+#ifdef __MVS__
+          char *const comma = "UNKNOWN";
+#else
           char *const comma = strchr (pw->pw_gecos, ',');
+#endif
           char *result;
 
           if (comma)
             *comma = '\0';
 
+#ifdef __MVS__
+          result = create_fullname ("", pw->pw_name);
+#else
           result = create_fullname (pw->pw_gecos, pw->pw_name);
+#endif
           printf (" %-19.19s", result);
           free (result);
         }
@@ -323,13 +331,21 @@ print_long_entry (const char name[])
     }
   else
     {
-      char *const comma = strchr (pw->pw_gecos, ',');
-      char *result;
+#ifdef __MVS__
+          char *const comma = "UNKNOWN";
+#else
+          char *const comma = strchr (pw->pw_gecos, ',');
+#endif
+          char *result;
 
-      if (comma)
-        *comma = '\0';
+          if (comma)
+            *comma = '\0';
 
-      result = create_fullname (pw->pw_gecos, pw->pw_name);
+#ifdef __MVS__
+          result = create_fullname ("", pw->pw_name);
+#else
+          result = create_fullname (pw->pw_gecos, pw->pw_name);
+#endif
       printf (" %s", result);
       free (result);
     }
diff --git a/src/shred.c b/src/shred.c
index 490fcd0..14e063e 100644
--- a/src/shred.c
+++ b/src/shred.c
@@ -945,7 +945,11 @@ do_wipefd (int fd, char const *qname, struct randint_source *s,
      for other file types.  */
 
   if (flags->remove_file && ftruncate (fd, 0) != 0
+#ifdef __MVS__
+      && (S_ISREG (st.st_mode)))
+#else
       && (S_ISREG (st.st_mode) || S_TYPEISSHM (&st)))
+#endif
     {
       error (0, errno, _("%s: error truncating"), qname);
       ok = false;
diff --git a/src/sort.c b/src/sort.c
index 3b775d6..a9fb260 100644
--- a/src/sort.c
+++ b/src/sort.c
@@ -971,7 +971,11 @@ stream_open (char const *file, char const *how)
         {
           int ftruncate_errno = errno;
           struct stat *outst = get_outstatus ();
+#ifdef __MVS__
+          if (!outst || S_ISREG (outst->st_mode))
+#else
           if (!outst || S_ISREG (outst->st_mode) || S_TYPEISSHM (outst))
+#endif
             die (SORT_FAILURE, ftruncate_errno, _("%s: error truncating"),
                  quotef (file));
         }
diff --git a/src/split.c b/src/split.c
index b7a0d0e..fe6f13d 100644
--- a/src/split.c
+++ b/src/split.c
@@ -472,7 +472,11 @@ create (char const *name)
         die (EXIT_FAILURE, 0, _("%s would overwrite input; aborting"),
              quoteaf (name));
       if (ftruncate (fd, 0) != 0
+#if defined(__MVS__)
+          && (S_ISREG (out_stat_buf.st_mode)))
+#else
           && (S_ISREG (out_stat_buf.st_mode) || S_TYPEISSHM (&out_stat_buf)))
+#endif
         die (EXIT_FAILURE, errno, _("%s: error truncating"), quotef (name));
 
       return fd;
diff --git a/src/stat.c b/src/stat.c
index 3765a8f..6fd4853 100644
--- a/src/stat.c
+++ b/src/stat.c
@@ -102,7 +102,12 @@
 # elif HAVE_STRUCT_STATFS_F_NAMEMAX
 #  define SB_F_NAMEMAX(S) ((S)->f_namemax)
 # endif
+#ifdef __MVS__
+#include <sys/statfs.h>
+# define STATFS w_statfs
+#else
 # define STATFS statfs
+#endif
 # if HAVE_OS_H /* BeOS */
 /* BeOS has a statvfs function, but it does not return sensible values
    for f_files, f_ffree and f_favail, and lacks f_type, f_basetype and
@@ -136,7 +141,11 @@ statfs (char const *filename, struct fs_info *buf)
 #  define STRUCT_STATXFS_F_FSID_IS_INTEGER true
 #  define STATFS_FRSIZE(S) ((S)->block_size)
 # else
+#ifndef __MVS__
 #  define STRUCT_STATVFS struct statfs
+#else
+#  define STRUCT_STATVFS struct w_statfs
+#endif
 #  define STRUCT_STATXFS_F_FSID_IS_INTEGER STRUCT_STATFS_F_FSID_IS_INTEGER
 #  if HAVE_STRUCT_STATFS_F_FRSIZE
 #   define STATFS_FRSIZE(S) ((S)->f_frsize)
@@ -263,6 +272,8 @@ human_fstype (STRUCT_STATVFS const *statfsbuf)
 {
 #ifdef STATXFS_FILE_SYSTEM_TYPE_MEMBER_NAME
   return statfsbuf->STATXFS_FILE_SYSTEM_TYPE_MEMBER_NAME;
+#elif __MVS__
+  return 0;
 #else
   switch (statfsbuf->f_type)
     {
@@ -877,6 +888,8 @@ print_statfs (char *pformat, size_t prefix_len, MAYBE_UNUSED char mod, char m,
       {
 #if STRUCT_STATXFS_F_FSID_IS_INTEGER
         uintmax_t fsid = statfsbuf->f_fsid;
+#elif __MVS__
+  break;
 #else
         typedef unsigned int fsid_word;
         verify (alignof (STRUCT_STATVFS) % alignof (fsid_word) == 0);
@@ -894,7 +907,7 @@ print_statfs (char *pformat, size_t prefix_len, MAYBE_UNUSED char mod, char m,
             fsid |= u << (i * CHAR_BIT * sizeof *p);
           }
 #endif
-        out_uint_x (pformat, prefix_len, fsid);
+        //out_uint_x (pformat, prefix_len, fsid);
       }
       break;
 
@@ -912,30 +925,32 @@ print_statfs (char *pformat, size_t prefix_len, MAYBE_UNUSED char mod, char m,
       out_string (pformat, prefix_len, human_fstype (statfsbuf));
       break;
     case 'b':
-      out_int (pformat, prefix_len, statfsbuf->f_blocks);
+      //out_int (pformat, prefix_len, statfsbuf->f_blocks);
       break;
     case 'f':
-      out_int (pformat, prefix_len, statfsbuf->f_bfree);
+      //out_int (pformat, prefix_len, statfsbuf->f_bfree);
       break;
     case 'a':
-      out_int (pformat, prefix_len, statfsbuf->f_bavail);
+      //out_int (pformat, prefix_len, statfsbuf->f_bavail);
       break;
     case 's':
-      out_uint (pformat, prefix_len, statfsbuf->f_bsize);
+      //out_uint (pformat, prefix_len, statfsbuf->f_bsize);
       break;
     case 'S':
       {
+/*
         uintmax_t frsize = STATFS_FRSIZE (statfsbuf);
         if (! frsize)
           frsize = statfsbuf->f_bsize;
         out_uint (pformat, prefix_len, frsize);
+*/
       }
       break;
     case 'c':
-      out_uint (pformat, prefix_len, statfsbuf->f_files);
+      //out_uint (pformat, prefix_len, statfsbuf->f_files);
       break;
     case 'd':
-      out_int (pformat, prefix_len, statfsbuf->f_ffree);
+      //out_int (pformat, prefix_len, statfsbuf->f_ffree);
       break;
     default:
       fputc ('?', stdout);
@@ -1270,12 +1285,12 @@ do_statfs (char const *filename, char const *format)
       return false;
     }
 
-  if (STATFS (filename, &statfsbuf) != 0)
+  /*if (STATFS (filename, &statfsbuf) != 0)
     {
       error (0, errno, _("cannot read file system information for %s"),
              quoteaf (filename));
       return false;
-    }
+    }*/
 
   bool fail = print_it (format, -1, filename, print_statfs, &statfsbuf);
   return ! fail;
diff --git a/src/system.h b/src/system.h
index 0c5c9b9..8abb006 100644
--- a/src/system.h
+++ b/src/system.h
@@ -701,8 +701,13 @@ bad_cast (char const *s)
 static inline bool
 usable_st_size (struct stat const *sb)
 {
+#ifdef __MVS__
+  return (S_ISREG (sb->st_mode) || S_ISLNK (sb->st_mode)
+          || S_TYPEISTMO (sb));
+#else
   return (S_ISREG (sb->st_mode) || S_ISLNK (sb->st_mode)
           || S_TYPEISSHM (sb) || S_TYPEISTMO (sb));
+#endif
 }
 
 _Noreturn void usage (int status);
